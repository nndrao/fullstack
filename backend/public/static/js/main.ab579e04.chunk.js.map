{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selectedId","data","id","message","intervalIsSet","idToDelete","idToUpdate","updateToApply","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","objIdToUpdate","update","editData","this","clearInterval","style","padding","type","onChange","e","target","value","placeholder","width","margin","onClick","height","className","key","focus","border","alignItems","justifyContent","alignSelf","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab579e04.chunk.js","sourcesContent":["// /client/App.js\nimport React, { Component } from 'react';\nimport \"./App.css\";\nimport axios from 'axios';\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    selectedId:-1,\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: -1,\n    updateToApply: \"\",\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    \n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    }).then(()=>{\n      this.getDataFromDb();\n  });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    }).then(()=>{\n        this.getDataFromDb();\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    }).then(()=>{\n      this.setState({idToUpdate:-1});\n      this.getDataFromDb();\n  });\n  };\n\n  editData = (id, message) => {\n\n    this.setState({ idToUpdate: id, updateToApply: message });\n  }\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px', margin: 5 }}\n          />\n          <button style={{ margin: 5 }} onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px', margin: 5 }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button style={{ margin: 5 }} onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n\n\n        <div style={{ height: 60 }}>\n         \n\n\n        </div>\n\n        <table className=\"fixed_header\">\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Message</th>\n              <th>Operations</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((data) => (\n              <tr key={data.id}>\n                <td>{data.id + \" : \" + data._id}</td>\n                <td>{ data.id==this.state.idToUpdate ? (<input className=\"edit-input\"  focus=\"true\" type=\"text\" value={this.state.updateToApply}  onChange={(e) => this.setState({ updateToApply: e.target.value })}/> ): data.message}</td>\n                <td>\n                  <button style={{ margin: 5 }} onClick={() => this.deleteFromDB(data.id)}>Delete</button>\n                  { data.id!=this.state.idToUpdate &&  <button style={{ margin: 5 }} onClick={() => { this.editData(data.id, data.message) }}>Edit</button>}\n                  { data.id==this.state.idToUpdate &&  <button style={{ margin: 5 }}  onClick={() => {this.updateDB(this.state.idToUpdate, this.state.updateToApply)}}>Update</button>}\n                 \n                </td>\n\n              </tr>\n\n            ))}\n          </tbody>\n\n        </table>\n\n<div className=\"vbox\" style={{margin:10,width:400,height:300,border:\"1px solid silver\", alignItems:\"center\",justifyContent:\"center\"}}>\n  <div alignSelf>abc</div>\n</div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}